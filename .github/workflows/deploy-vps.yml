name: Deploy to VPS

on:
  push:
    branches: [ main ]
  workflow_dispatch:
    inputs:
      environment:
        description: 'Ambiente para deploy'
        required: true
        default: 'production'
        type: choice
        options:
        - production
        - staging

jobs:
  deploy:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'
        
    - name: Install Frontend Dependencies
      working-directory: ./frontend
      run: npm ci
      
    - name: Build Frontend
      working-directory: ./frontend
      run: npm run build
      
    - name: Install Backend Dependencies
      working-directory: ./backend
      run: npm ci
      
    - name: Build Backend Image
      working-directory: ./backend
      run: |
        docker build -t weavecode-backend:${{ github.sha }} .
        docker tag weavecode-backend:${{ github.sha }} weavecode-backend:latest
        
    - name: Test Backend
      working-directory: ./backend
      run: |
        npm test || echo "Tests failed but continuing with deploy"
        
    - name: Setup SSH
      uses: webfactory/ssh-agent@v0.8.0
      with:
        ssh-private-key: ${{ secrets.VPS_SSH_KEY }}
        
    - name: Add VPS to known hosts
      run: |
        ssh-keyscan -H ${{ secrets.VPS_HOST }} >> ~/.ssh/known_hosts
        
    - name: Deploy to VPS
      run: |
        echo "üöÄ Iniciando deploy para VPS..."
        
        # Criar arquivo de deploy tempor√°rio
        cat > deploy.sh << 'EOF'
        #!/bin/bash
        set -e
        
        echo "üì• Recebendo deploy do GitHub Actions..."
        
        cd /opt/weavecode
        
        # Backup antes do deploy
        echo "üíæ Criando backup..."
        ./backup-postgres.sh
        
        # Parar servi√ßos
        echo "‚èπÔ∏è Parando servi√ßos..."
        docker-compose down
        
        # Pull das imagens mais recentes
        echo "üì• Baixando imagens mais recentes..."
        docker-compose pull
        
        # Iniciar servi√ßos
        echo "‚ñ∂Ô∏è Iniciando servi√ßos..."
        docker-compose up -d
        
        # Aguardar servi√ßos ficarem prontos
        echo "‚è≥ Aguardando servi√ßos ficarem prontos..."
        sleep 30
        
        # Verificar sa√∫de
        echo "üîç Verificando sa√∫de dos servi√ßos..."
        ./health-check.sh
        
        # Verificar se tudo est√° funcionando
        if curl -f http://localhost:4000/health > /dev/null 2>&1; then
          echo "‚úÖ Deploy conclu√≠do com sucesso!"
          echo "üåê Site dispon√≠vel em: http://${{ secrets.VPS_HOST }}"
        else
          echo "‚ùå Deploy falhou - backend n√£o est√° respondendo"
          exit 1
        fi
        EOF
        
        # Enviar script para VPS
        scp deploy.sh ${{ secrets.VPS_USER }}@${{ secrets.VPS_HOST }}:/opt/weavecode/
        
        # Executar deploy na VPS
        ssh ${{ secrets.VPS_USER }}@${{ secrets.VPS_HOST }} << 'SSH_EOF'
          cd /opt/weavecode
          chmod +x deploy.sh
          ./deploy.sh
        SSH_EOF
        
        echo "‚úÖ Deploy conclu√≠do com sucesso!"
        
    - name: Health Check
      run: |
        echo "üîç Verificando sa√∫de dos servi√ßos..."
        sleep 60  # Aguardar servi√ßos ficarem prontos
        
        # Verificar se o backend est√° respondendo
        if curl -f http://${{ secrets.VPS_HOST }}:4000/health > /dev/null 2>&1; then
          echo "‚úÖ Backend est√° funcionando!"
        else
          echo "‚ùå Backend n√£o est√° respondendo"
          exit 1
        fi
        
        # Verificar se o site est√° acess√≠vel
        if curl -f http://${{ secrets.VPS_HOST }} > /dev/null 2>&1; then
          echo "‚úÖ Site est√° acess√≠vel!"
        else
          echo "‚ùå Site n√£o est√° acess√≠vel"
          exit 1
        fi
        
    - name: Notify Success
      if: success()
      run: |
        echo "üéâ Deploy conclu√≠do com sucesso!"
        echo "Commit: ${{ github.sha }}"
        echo "Branch: ${{ github.ref_name }}"
        echo "VPS: ${{ secrets.VPS_HOST }}"
        echo "Ambiente: ${{ inputs.environment || 'production' }}"
        
    - name: Notify Failure
      if: failure()
      run: |
        echo "‚ùå Deploy falhou!"
        echo "Commit: ${{ github.sha }}"
        echo "Branch: ${{ github.ref_name }}"
        echo "VPS: ${{ secrets.VPS_HOST }}"
        echo "Verifique os logs para mais detalhes"
        
    - name: Cleanup
      if: always()
      run: |
        echo "üßπ Limpando arquivos tempor√°rios..."
        rm -f deploy.sh
